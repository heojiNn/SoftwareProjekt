@page "/offer-edit/{Id:int}"
@attribute [Authorize(Roles = "sales, admin")]
@namespace XCV.Pages.OfferNamespace

@inject IJSRuntime JS
@inject IProfileService profileService
@inject IOfferService offerService
@inject ISkillService skillService
@inject IFieldService fieldService
@inject IRoleService roleService 
@inject IConfigService configService
@inject OfferData offerData

@using Blazored.Typeahead



    <div class="alert alert-success" role="alert">
        @changeInfo?.SuccesMessage
    </div>
    <div class="card my-1">
        <div class="card-header">
            <div class="form-group">
                <div class="row">
                    <div class="col-md-5">
                        <h3><label>Titel ver√§ndern: </label> </h3>
                    </div>
                    <div class="col">
                        <h3><input class="form-control" @bind="@title" /></h3>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row gutters-sm">
        <div class="col-sm-6 mb-3">
            <div class="card ">
                
                <textarea class="form-control " rows="3" @bind="@description" placeholder="optionaler Beschreibungstext">   </textarea>
                @if (description.Length > 140)
                {<p style="color: darkred">@(description.Length + " Zeichen, bei maximal 140")</p>
                }
            </div>
        </div>
        <div class="col-sm-6 mb-3">
            <div class="card ">
                <div class="row">
                    <div class="col-6">
                        <label  class="ml-2" for="year">Projektstart:</label><br>
                        <input class="form-control ml-2" type="date" @bind="@SelectedStart" @bind:event="oninput" style="width:80%"><br>
                        <label> </label><br>
                    </div>
                    <div class="col-6">
                        <label class="ml-2" for="year">Projektende:</label><br>
                        <input class="form-control ml-2" type="date" @bind="@SelectedEnd" @bind:event="oninput" style="width:80%"><br>
                        <label> </label><br>
                    </div>
                    <br />
                </div>
            </div>
        </div>
    </div>

    <CollapsibleCard CardHeaderTitle="Branchen">
        <CardBody>
            <input class="form-control" id="skiSer" placeholder="suche" @bind="@fieldSearch" @bind:event="oninput" />
            @if (fieldSearch == "")
            {
                var fields = fieldService.GetAllFields().ToList();
                if (fields.Any())
                {
                    <div class="scroll ml-2" style="overflow-x: hidden;">
                    <CheckBoxList Data="@fields" TextField="@((item)=>item.ToString())" SelectedValues="@SelectedFields" />
                    </div>
                }
            }
            else
            { var sResults = fieldService.GetAllFields().Where(x => x.Name.ToLower().StartsWith(fieldSearch.ToLower())).OrderBy(x => x.Name);
                    <div class="scroll ml-2" style="overflow-x: hidden;">
                    <CheckBoxList Data="@sResults" TextField="@((item)=>item.ToString())" SelectedValues="@SelectedFields" />
                    </div>
            }
        </CardBody>
    </CollapsibleCard>

    <br />
    <div class="row gutters-sm">
        <div class="col-sm-6 mb-3" style="min-height: 100px;">
            <CollapsibleCard CardHeaderTitle="Hardskills">
                <CardBody>
                    <input class="form-control" id="skiSer" placeholder="suche" @bind="@skillSearch" @bind:event="oninput" />
                    @if (skillSearch == "")
                    {
                        var skills = skillService.GetAllSkills().Where(x => x.Type == SkillGroup.Hardskill).ToList();
                        if (skills.Any())
                        {
                            var root = skills.First().Category.Parent;
                            if (root.Parent != null)
                                root = root.Parent;
                            foreach (SkillCategory cat1 in root.Children)
                            {
                                var isSkill = (cat1.Children.First() is Skill);
                                sBi++;
                                <CollapsibleCard CardHeaderTitle="@cat1.Name" ShowCardBody="showB[sBi]" SmallInner="true">
                                    <CardHeader> @(isSkill ? $"{cat1.Children.Count()} enthalten" : "")</CardHeader>
                                    <CardBody>
                                        @if (isSkill)
                                        {
                                            var skills = cat1.Children.Cast<Skill>().OrderBy(x => x);
                                            <CheckBoxList Data="@skills" TextField="@((item)=>item.ToString())" SelectedValues="SelectedHardskills" />
                                        }
                                        else
                                        {
                                            foreach (SkillCategory cat in cat1.Children)
                                            {
                                                var skills = cat.Children.Cast<Skill>().OrderBy(x => x);
                                                sBi++;
                                                <CollapsibleCard CardHeaderTitle="@cat.Name" ShowCardBody="showB[sBi]" SmallInner="true">
                                                    <CardHeader> @cat.Children.Count() enthalten</CardHeader>
                                                    <CardBody>
                                                        <CheckBoxList Data="@skills" TextField="@((item)=>item.ToString())"
                                                                      SelectedValues="SelectedHardskills" />
                                                    </CardBody>
                                                </CollapsibleCard>
                                            }
                                        }
                                    </CardBody>
                                </CollapsibleCard>
                            }
                        }
                    }
                    else
                    {
                        var sResulte = skillService.GetAllSkills().Where(x => x.Name.ToLower().StartsWith(skillSearch.ToLower())).OrderBy(x => x.Name);
                        <CheckBoxList Data="@sResulte" TextField="@(x=> ($"{((Skill)(x)).Name} in ({((Skill)(x)).Category.Name})"  )  )" SelectedValues="SelectedHardskills" />
                    }
                </CardBody>
            </CollapsibleCard>
        </div>

        @* Softskills *@
        <div class="col-sm-6 mb-3" style="min-height: 100px;">
            @{ var allSoftSkills = skillService.GetAllSkills().Where(x => x.Type == SkillGroup.Softskill); }
            <CollapsibleCard CardHeaderTitle="Softskills">
                <CardBody>
                    <div class="scroll ml-2" style="overflow-x: hidden;">
                        <CheckBoxList Data="@allSoftSkills" TextField="@((item)=>item.Name.ToString())" SelectedValues="@SelectedSoftskills" />
                    </div>
                </CardBody>
            </CollapsibleCard>
        </div>
    </div>

    @* Employees *@
    <div class="card ">
        <div class="card-header">
            <h4>
                Mitarbeiter

                @if (MitarbeiterCollapsed)
                {
                    <svg @onclick="@MitarbeiterToggle" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                         width="24" height="24">
                        <path d="M11.646 15.146L5.854 9.354a.5.5 0 01.353-.854h11.586a.5.5 0 01.353.854l-5.793 5.792a.5.5 0 01-.707 0z">
                        </path>
                    </svg>

                }

                @if (!MitarbeiterCollapsed)
                {
                    <svg @onclick="@MitarbeiterToggle" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                         width="24" height="24">
                        <path d="M12.354 8.854l5.792 5.792a.5.5 0 01-.353.854H6.207a.5.5 0 01-.353-.854l5.792-5.792a.5.5 0 01.708 0z">
                        </path>
                    </svg>
                }

            </h4>
        </div>

        @if (!MitarbeiterCollapsed)
        {
            <div class="card-body employee">
                <div class="row">
                    @if (SelectedParticipants != null)
                    {
                        @foreach (Employee em in SelectedParticipants)
                        {
                            <div class="card employee">
                                <div class="card-header">
                                    @(new String(em.FirstName + " " + em.LastName.Substring(0, 1) + "."))
                                    <button type="button" class="btn oi oi-trash btnhover" style="float:right; background-color:transparent;" @onclick="(e => SelectedParticipants.Remove(em))">Entfernen</button>
                                </div>
                                <div class="card-body">
                                    @{ var allRoles = roleService.GetAllRoles().Where(x => x.RCL == 0); }
                                    <select class="form-control form-control-sm" @bind="@em.offerRole">
                                        Rolle:
                                        @foreach (Role r in allRoles)
                                        {
                                            <option value="@r.Name"> @r.Name </option>
                                        }
                                    </select>

                                    <select class="form-control form-control-sm" id="RCL" @bind="@em.offerRCL">
                                        RCL:
                                        @for (int i = 1; i <= 8; i++)
                                        {
                                            <option value="@i"> @i</option>
                                        }
                                    </select>

                                    <br />
                                    Stundensatz <input type="number" min="0" max="9999" @bind="@em.offerWage">
                                    Std/Tag <input type="number" min="0" max="24" @bind="@em.hoursPerDay" />
                                    <br />
                                    Tage/Laufzeit <input type="number" min="0" max="@offerService.Runtime(myOffer.End, myOffer.Start)" @bind="@em.daysPerRun"/>
                                    Rabatt(0-100) <input type="number" min="0" max="100" @bind="@em.discount" />
                                </div>
                            </div>
                         }
                    }
                </div>
                                <button type="button" class="btn btn-secondary" style=" float:left; margin: 3em 1em" @onclick="@(e => ValidateDelete())"> Alle Entfernen </button>
                <a href="offer-search-add/@Id" class="btn btn-secondary" style="float:left; margin: 3em 1em" @onclick="Store"> Hinzuf√ºgen </a>
            </div>
        }
    </div>
    <button type="button" class="btn btn-secondary" style=" float: right; margin: 3em 1em" @onclick="Validate"> Best√§tigen</button>
    @*<a href="offer-edit/@Id" class="btn btn-secondary" style="float:right; margin: 3em 1em" @onclick="Reset"> √Ñnderungen zur√ºcksetzen</a>*@
    <a href="offer/@Id" class="btn btn-secondary" style="float:right; margin: 3em 1em" @onclick="Discard"> Zur√ºck zum Angebot</a>


<Modal @ref="modal">
    <Title>Sie haben folgende √Ñnderungen vorgenommen:</Title>

    <Body>
        <ul class="alert alert-danger" role="alert">
            @foreach (string line in changeInfo.ErrorMessages)
            {
                <li>
                    <pre>@line</pre>
                </li>
            }
        </ul>
        <ul class="alert alert-info" role="alert">
            @foreach (string line in changeInfo.InfoMessages)
            {
                <li>
                    <pre>@line</pre>
                </li>
            }
        </ul>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" @onclick="@UpdateOffer">speichern</button>
        <button type="button" class="btn btn-secondary" @onclick="@Close">schlie√üen</button>
    </Footer>
</Modal>
<Modal @ref="modal2">
    <Title>Entfernen aller Mitarbeiter die sich derzeit in der Liste befinden?</Title>
    <Body>
        <p class="alert alert-danger">@error</p>
    </Body>
    <Footer>
        <a href="offer-edit/@Id" class="btn btn-secondary" @onclick="@RemoveAllEmployees">Alle Entfernen</a>
        <a href="offer-edit/@Id" class="btn btn-secondary" @onclick="@Close">Schlie√üen</a>
    </Footer>
</Modal>