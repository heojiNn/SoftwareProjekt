@page "/login"


@inject CustomAuthentiProvider authentiProvider
@inject IAccountService accountService
@inject NavigationManager NavigationManager


<div class="container">
    <div class="sidenav">
        <div class="login-main-text">
            <img src="\css\XITASO_Logo_hoch_weiss.png" />
        </div>
    </div>
    <div class="logMain">
        <div class="jumbotron container" @onclick="LoginA">
            <div class="form login-form">

                <div class="form-group">
                    <label for="PersoNumber">PersNr</label>
                    <input @bind="formData.PersoNumber " class="form-control" id="PersoNumber" @onkeyup="LoginA" />
                </div>

                <div class="form-group">
                    <label for="PersoNumber">Password</label>
                    <input @bind="formData.Password " class="form-control" id="Password" @onkeyup="LoginA" />
                </div>

                <div class="alert alert-info" role="alert">
                    @validationInfo?.ErrorMessage
                </div>

                <button class="btn btn-secondary" @onclick="LoginA">Login</button>
            </div>
        </div>
        <table class="table table-sm">
            <tr>
                <th>Personal Number</th>
                <th>Password</th>
                <th>Vorname</th>
                <th>Nachname</th>
                <th>Zugriffs Rollen</th>
            </tr>
            @foreach (Team14.Data.Employee ac in accountService.ShowAllProfiles())
            {
                var roles = String.Join(", ", ac.AcRoles);
                <tr>
                    <td @onclick="@(e => formData.PersoNumber = ac.PersoNumber)"> @ac.PersoNumber </td>
                    <td @onclick="@(e => formData.Password = ac.Password)"> @ac.Password</td>
                    <td> @ac.FirstName</td>
                    <td> @ac.LastName</td>
                    <td> @roles</td>
                </tr>
            }
        </table>
    </div>
</div>


@code {
    private Employee formData = new Employee();
    private LoginResult validationInfo;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await authentiProvider.GetAuthenticationStateAsync();
        formData.PersoNumber = authstate.User.Identity.Name;

        authentiProvider.ValidationEventHandel += OnValidationReturn;
    }


    private async void LoginA()
    {
        if (await authentiProvider.Login(formData.PersoNumber, formData.Password))
            NavigationManager.NavigateTo("/my-profile", forceLoad: true);
    }



    private void OnValidationReturn(object sender, LoginResult e) => validationInfo = e;
}
