@page "/create-employee"
@attribute [Authorize(Roles = "admin")]


@inject IAccountService accountService

<div class="container-fluid">


    <div class="card my-1">
        <div class="card-header text-center">
            <h3>Neuen Mitarbeiter erstellen</h3>
        </div>
    </div>

    <table class="table table-striped">
        <tr>
            <th>Personalnummer</th>
            <th>Passwort</th>
            <th>Zugriffsrollen</th>
            <th>Vorname</th>
            <th>Nachname</th>
            <th>Angestellt seit  </th>
            <th></th>
        </tr>
        <tr>
            <td class="form-group">

                <input @bind="@newOne.PersoNumber" class="form-control" id="ps" />
            </td>
            <td class="form-group">

                <input @bind="@newOne.Password" class="form-control" id="pw" />
            </td>
            <td class="form-group" @onclick="StateHasChanged">
                
                @{
                    List<AccessRole> allRoles = new() { AccessRole.Sales, AccessRole.Admin };
                }
                <CheckBoxList Data="@allRoles" TextField="@( item => item.ToString() )" SelectedValues="newOne.AcRoles" />
            </td>
            <td class="form-group">

                <input @bind="@newOne.FirstName" class="form-control" id="fName" />
            </td>

            <td class="form-group">

                <input @bind="@newOne.LastName" class="form-control" id="name" />
            </td>
            <td class="form-group">
                
                <input @bind="@startDate" class="form-control"/>
                
            </td>
            <td>
                <input type="submit" class="btn btn-primary" value="HinzufÃ¼gen" @onclick="Create" />
            </td>
        </tr>
        
        @foreach (Employee account in accountService.ShowAllProfiles())
        {
            var roles = String.Join(", ", account.AcRoles);
            <tr>
                <td>@account.PersoNumber </td>
                <td>@account.Password</td>
                <td>@roles</td>
                <td>@account.FirstName </td>
                <td>@account.LastName</td>
                <td>@account.WorkingSince</td>
                <td> <button class="btn btn-secondary" @onclick="@(e => Delete(account))" >Entfernen </button> </td>
            </tr>
        }

    </table>


    <ul class="alert alert-danger" role="alert">
        @foreach (string line in changeInfo.ErrorMessages)
        {
            <li>
                <pre>@line</pre>
            </li>
        }
    </ul>
    <div class="alert-container">
        <div class="alert alert-success" role="alert">
            @changeInfo?.SuccesMessage
        </div>
    </div>
    <ul class="alert alert-info" role="alert">
        @foreach (string line in changeInfo.InfoMessages)
        {
            <li>
                <pre>@line</pre>
            </li>
        }
    </ul>
</div>
    @code {
        private Employee newOne = new ();
        private DateTime startDate = DateTime.Now.Date;

        private ChangeResult changeInfo = new();
        protected override void OnInitialized()
        {
            accountService.ChangeEventHandel += OnChangeReturn;
        }


        private void Create()
        {
            Employee copy = new()/// copy cause working-since is readonly(init)
            {
                PersoNumber = newOne.PersoNumber,
                Password = newOne.Password,
                FirstName = newOne.FirstName,
                LastName = newOne.LastName,
                AcRoles = newOne.AcRoles,
                WorkingSince = startDate
            };
            accountService.CreateAccount(copy);
        }
        private void Delete(Employee e)
        {
            accountService.Delete(e);
        }


        private void OnChangeReturn(object sender, ChangeResult e) => changeInfo = e;
    }
