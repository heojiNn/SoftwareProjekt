@page "/"
@page "/my-profile"
@attribute [Authorize]


@inject CustomAuthentiProvider authentiProvider
@inject IProfileService profileService
@inject ISkillService skillService
@inject ILanguageService sprachenService
@inject IProjectService proService


<div class="container-fluid">


    <div class="card my-1">
        <div class="card-header text-center" style="position: relative">
            <div style="position: absolute; margin-top: 0.1%;">
                <a href="edit-profile" class="btn btn-secondary oi oi-cog" style="border-color: #7A212E"> Bearbeiten</a>
            </div>
            <h3 style="text-align: center">Profil Übersicht von @myProfile.PersoNumber</h3>
        </div>
        


    </div>
    @if (!myProfile.MadeFirstChangesOnProfile)
    {
        <br>
        <div class="alert alert-warning" role="alert">
            Sie habe noch keine Änderungen an ihrem Profil vorgenommen.<br>
            Bitte tragen Sie die die Informationen möglichst bald ein.<br>
        </div>}


    <div class="card mb-3">
        <div class="card-header">
            <h4> Beschreibung </h4>
        </div>

        <div class="row g-0">
            <div class="col-md-4">
                <img src="@myProfile.Image" alt="Profilbild" class="rounded" style="margin:1em; max-width:90%">
            </div>
            <div class="col-md-8">
                <div class="card-body">
                    <h5 class="card-title">@myProfile.FirstName &nbsp; @myProfile.LastName</h5>
                    <p class="card-text" style="min-height: 150px;">
                        <pre>@myProfile.Description</pre>
                    </p>
                    <p>Rate Card Level: @myProfile.RCL </p>
                    @{var yearsE = myProfile.Expirience != null ? (float)(DateTime.Now.Subtract(myProfile.Expirience.Value).Days) / 356 : 0;}
                    <p>Berufserfahrung: @(yearsE == 0 ? "noch nicht gesetzt" :  $"{yearsE.ToString("N2") }Jahre" ) </p>

                </div>
            </div>
        </div>
    </div>

    <div class="row gutters-sm">
        <div class="col-sm-6 mb-3" style="min-height: 200px;">
            <CollapsibleCard CardHeaderTitle="Rollen" ShowCardBody=true>
                <CardBody>
                    <div class="scroll">
                        @foreach (Role role in myProfile.Roles)
                        {
                            <p class="ml-2"><b>@role</b> mit RCL (@role.RCL)</p>}
                    </div>
                </CardBody>
            </CollapsibleCard>
        </div>
        <div class="col-sm-6 mb-3" style="min-height: 200px;">
            <CollapsibleCard CardHeaderTitle="Branchenwissen" ShowCardBody=true>
                <CardBody>
                    <div class="scroll">
                        @foreach (Field field in myProfile.Fields)
                        {
                        <p class="ml-2">@field <br></p>}
</div>
                </CardBody>
            </CollapsibleCard>
        </div>


        <div class="col-sm-6 mb-3" style="min-height: 200px;">
            <CollapsibleCard CardHeaderTitle="SoftSkills" ShowCardBody=true>
                <CardBody>
                    <div class="scroll">
                        @foreach (Skill sSkill in myProfile.Abilities.Where(x => x.Type == SkillGroup.Softskill))
                        {
                        <p class="ml-2"> @sSkill <br></p>}
</div>
                </CardBody>
            </CollapsibleCard>
        </div>
        <div class="col-sm-6 mb-3" style="min-height: 200px;">
            <CollapsibleCard CardHeaderTitle="Sprachen" ShowCardBody=true>
                <CardBody>
                    <div class="scroll">
                        @foreach (Language lang in myProfile.Languages)
                        {
                            var lvlIndex = Array.FindIndex(sprachenService.GetAllLevel(), (x => x == lang.Level));
                            int lvlIndexPerce = ((int)lvlIndex * 100 / (sprachenService.GetAllLevel().Length - 1));

                        <p class="ml-2">
                            @lang.Name</p>
                            <div class="progress mb-3 ml-2" style="height:15px">
                                <div class="progress-bar bg-secondary" role="progressbar" aria-valuemin="0"
                                     aria-valuemax="100" style="width: @lvlIndexPerce%;">
                                    @lang.Level
                                </div>
                            </div>}
</div>
                </CardBody>
            </CollapsibleCard>
        </div>


        <div class="col-sm-6 mb-3 " style="min-height: 200px;">
            <CollapsibleCard CardHeaderTitle="Hardskills" ShowCardBody=true>
                <CardBody>
                    <div class="scroll2">
                        @{ var hSkills = myProfile.Abilities.Where(x => x.Type == SkillGroup.Hardskill);
                            if (hSkills.Any())
                            {
                                var root = hSkills.First().Category.GetRoot();
                                var hRoot = (SkillCategory)(root.Children.First(x => x.Name == "HardSkills"));

                                foreach (SkillCategory topLevel in hRoot.Children)
                                {
                                    if (topLevel is SkillCategory toptCast && toptCast.Children.Any())
                                    {
                                        <CollapsibleCard CardHeaderTitle="@topLevel.Name" ShowCardBody=true SmallInner="true">
                                            <CardBody>
                                                @foreach (var cat in topLevel.Children)
                                                {
                                                    if (cat is Skill skill)
                                                    {
                                                        int lvlIndex = Array.FindIndex(skillService.GetAllLevel(), (x => x == skill.Level));
                                                        if (lvlIndex == 0)
                                                        {
                                                            <button class="btn btn-outline-secondary btn-sm" disabled>@skill </button> }
                                                        if (lvlIndex == 1)
                                                        {
                                                            <button class="btn btn-outline-dark btn-sm" disabled>@skill </button> }
                                                        if (lvlIndex == 2)
                                                        {
                                                            <button class="btn btn-outline-info btn-sm" disabled>@skill </button> }
                                                        if (lvlIndex == 3)
                                                        {
                                                            <button class="btn btn-outline-success btn-sm" disabled>@skill </button> }
                                                    }
                                                    if (cat is SkillCategory castCat && castCat.Children.Any())
                                                    {
                                                        <b>@castCat.Name</b>
                                                        <div>
                                                            @foreach (Skill skill2 in castCat.Children)
                                                            {
                                                                int lvlIndex = Array.FindIndex(skillService.GetAllLevel(), (x => x == skill2.Level));
                                                                if (lvlIndex == 0)
                                                                {
                                                                    <button class="btn btn-outline-secondary btn-sm" disabled>@skill2</button> }
                                                                if (lvlIndex == 1)
                                                                {
                                                                    <button class="btn btn-outline-dark btn-sm" disabled>@skill2</button> }
                                                                if (lvlIndex == 2)
                                                                {
                                                                    <button class="btn btn-outline-info btn-sm" disabled>@skill2</button> }
                                                                if (lvlIndex == 3)
                                                                {
                                                                    <button class="btn btn-outline-success btn-sm" disabled>@skill2</button>}
                                                            }
                                                        </div>}
                                                }
                                            </CardBody>
                                        </CollapsibleCard> }
                                }
                            } }
                    </div>
                </CardBody>
            </CollapsibleCard>
        </div>

        <div class="col-sm-6 mb-3" style="min-height: 200px;">
            <CollapsibleCard CardHeaderTitle="Projekte " ShowCardBody=true>
                <CardBody>
                    <div class="scroll2">
                        <table class="table table-bordered table-striped text-center">
                            <thead>
                                <tr>
                                    <th class="text-center">beteiligte Projekte</th>
                                    <th class="text-center">Tätigkeiten im Projekt</th>
                                </tr>
                            </thead>
                            @foreach (Project pro in proService.ShowAllProjects())
                            {
            <tr>
                <td class="pt-3-half">
                    @pro.Title
                </td>
                <td class="pt-3-half">
                    @foreach (var keyValue in pro.Activities.Where(x => x.Value.persNr.Contains(
                 myProfile.PersoNumber)))
                    {
@keyValue.Key
                        <br>}
                </td>
            </tr>}
                        </table>
                    </div>
                </CardBody>
            </CollapsibleCard>
        </div>

    </div>


</div>
<a href="edit-profile" class="btn btn-secondary" style="float: right; margin: 3em 1em"> Bearbeiten</a>
<br>
<br>


@code {
    private Employee myProfile = new Employee();


    protected override async Task OnInitializedAsync()
    {
        var authstate = await authentiProvider.GetAuthenticationStateAsync();

        myProfile = profileService.ShowProfile(authstate.User.Identity.Name) ?? new Employee();
    }

    private void OnSelected(string selection)
    {
        Console.WriteLine(selection);
    }



    }
