@page "/edit-profile"
@attribute [Authorize]

@using XCV.Shared.Misc

@inject IJSRuntime JS
@inject CustomAuthentiProvider authentiProvider
@inject IProfileService profileService

@inject ISkillService skillService
@inject ILanguageService langService
@inject IFieldService fieldService
@inject IRoleService roleService
@inject IProjectService proService



<div class="container-fluid" tabindex="0" @onkeydown="(e) => KeyHandler(e, false)">
    <div class="alert alert-success" role="alert">
        @changeInfo?.SuccesMessage
    </div>
    <div class="card my-1">
        <div class="card-header">
            <u><b style="color: white;">Personalnummer: @myProfile.PersoNumber</b></u>
        </div>
    </div>

    <!--Beschreibung Beginn-->
    <div class="card mb-3">
        <div class="card-header">
            <h4> Beschreibung </h4>
        </div>


        <div class="card-body">

            <div class="row">
                <div class="col-md-4">
                    <img src="@myProfile.Image" alt="Profilbild" class="rounded" style="margin:1em; max-width:90%">
                    <br>Bild hochladen
                    <InputFile OnChange="@JustUpload" class="btn-sm btn-secondary p-0" />
                </div>
                <div class="col-md-8">
                    <!--Large lg ≥992px  Ist es eine Reihe -->
                    <!-- Small sm ≥576px  Sind es 2 Reihen-->
                    <div class="row">
                        <label class="col-md-6 col-xl-2 col-form-label" for="inputFirstName">Vorname</label>
                        <div class="col-md-6 col-xl-4 ">
                            <input class="form-control" id="inputFirstName" @bind="@myProfile.FirstName">
                        </div>
                        <label class="col-md-6 col-xl-2 col-form-label" for="inputLastName">Nachname</label>
                        <div class="col-md-6 col-xl-4">
                            <input class="form-control" id="inputLastName" @bind="@myProfile.LastName">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="inputRcl">Beschreibung:</label>
                        <textarea class="form-control " rows="6" @bind="@myProfile.Description"
                                  @onkeydown="(e) => KeyHandler(e, true)">
                        </textarea>
                    </div>

                    <div class="row ">
                        <div class="col-md-8 col-xl-6">
                            <label for="inputRcl">Rate-Card-Level</label>
                            <input class="form-control col-6" id="inputRcl" @bind="@myProfile.RCL">
                        </div>
                        <div class="col-md-12 col-xl-6">
                            <div class="row">
                                <label class="col text-center">BerufsErfahrung @myProfile.Expirience Jahre</label>
                            </div>
                            <div class="row">
                                <div class="col-4">
                                    <input class="col-9" id="inputExpir" @bind="@expirence[0]">
                                    <label for="inputExpir">als Stud.</label>
                                </div>
                                <div class="col-4">
                                    <input class="col-9" id="inputExpir" @bind="@expirence[1]">
                                    <label for="inputExpir">als WiHi.</label>
                                </div>
                                <div class="col-4">
                                    <input class="col-9" id="inputExpir" @bind="@expirence[2]">
                                    <label for="inputExpir">im Job</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    Angestellt seit @myProfile.WorkingSince.Date.ToString("dd.MM.yyyy")
                    <br>

                </div>
            </div>
        </div>
    </div>


    <div class="row gutters-sm">
        <div class="col-sm-6 mb-3" style="min-height: 200px;">
            @{ var rrcl = myProfile.RCL ?? 0;
                            var allRoles = roleService.GetAllRoles(rrcl); }
            <CollapsibleCard CardHeaderTitle="Rollen">
                <CardBody>
                    <div class="scroll" style="overflow-x: hidden;">
                        <CheckBoxList Data="@allRoles" TextField="@((item)=>item.Name.ToString())"
                                      SelectedValues="myProfile.Roles" />
                    </div>
                </CardBody>
            </CollapsibleCard>
        </div>
        <div class="col-sm-6 mb-3" style="min-height: 200px;">
            @{ var allFields = fieldService.GetAllFields(); }
            <CollapsibleCard CardHeaderTitle="Branchenwissen">
                <CardBody>
                    <div class="scroll" style="overflow-x: hidden;">
                        <CheckBoxList Data="@allFields" TextField="@((item)=>item.Name.ToString())"
                                      SelectedValues="myProfile.Fields" />
                    </div>
                </CardBody>
            </CollapsibleCard>
        </div>


        <div class="col-sm-6 mb-3" style="min-height: 200px;">
            @{ var allSoftSkills = skillService.GetAllSkills().Where(x => x.Type == SkillGroup.Softskill); }
            <CollapsibleCard CardHeaderTitle="Soft Skils">
                <CardBody>
                    <div class="scroll" style="overflow-x: hidden;">
                        <CheckBoxList Data="@allSoftSkills" TextField="@((item)=>item.Name.ToString())"
                                      SelectedValues="myProfile.Abilities" />
                    </div>
                </CardBody>
            </CollapsibleCard>
        </div>
        <div class="col-sm-6 mb-3" style="min-height: 200px;">
            @{ var allLanguages = langService.GetAllLanguages(); }
            <CollapsibleCard CardHeaderTitle="Sprachen">
                <CardBody>
                    <div class="scroll" style="overflow-x: hidden;">
                        <CheckBoxList Data="@allLanguages" TextField="@((item)=>item.Name.ToString())"
                                      SelectedValues="myProfile.Languages" />
                    </div>
                </CardBody>
            </CollapsibleCard>
        </div>



        <div class="col-sm-6 mb-3" style="min-height: 200px;">
            <CollapsibleCard CardHeaderTitle="Hardskills" ShowCardBody="true">
                <CardHeader><input class="form-control" id="skiSer" @bind="@skillSearch" /></CardHeader>
                <CardBody>
                    @if (skillSearch == "")
                    {
                        var skills = skillService.GetAllSkills().Where(x => x.Type == SkillGroup.Hardskill).ToList();
                        if (skills.Any())
                        {
                            var root = skills.First().Category.Parent;
                            if (root.Parent != null)
                                root = root.Parent;
                            foreach (SkillCategory cat1 in root.Children)
                            {
                                var isSkill = (cat1.Children.First() is Skill);
    <CollapsibleCard CardHeaderTitle="@cat1.Name" ShowCardBody="@(!isSkill)" SmallInner="true">
        <CardHeader> @(isSkill ? $"{cat1.Children.Count()} enthalten" : "")</CardHeader>
        <CardBody>
            @if (isSkill)
            {
                var skills = cat1.Children.Cast<Skill>().OrderBy(x => x);
<CheckBoxList Data="@skills" TextField="@((item)=>item.ToString())"
              SelectedValues="myProfile.Abilities" /> }
                                else
                                {
                                    foreach (SkillCategory cat in cat1.Children)
                                    {
                                        var skills = cat.Children.Cast<Skill>().OrderBy(x => x);
<CollapsibleCard CardHeaderTitle="@cat.Name" SmallInner="true">
    <CardHeader> @cat.Children.Count() enthalten</CardHeader>
    <CardBody>
        <CheckBoxList Data="@skills" TextField="@((item)=>item.ToString())"
                      SelectedValues="myProfile.Abilities" />
    </CardBody>
</CollapsibleCard>                                    }
                                }
        </CardBody>
    </CollapsibleCard> }
                        }
                    }
                    else
                    {
    <CheckBoxList Data="@skillService.GetSkillsStarWith(skillSearch)" TextField="@((item)=>item.ToString())" SelectedValues="myProfile.Abilities" />}
                </CardBody>
            </CollapsibleCard>
        </div>
        <div class="col-sm-6 mb-3" style="min-height: 200px;">

            <CollapsibleCard CardHeaderTitle="Projekte ">
                <CardBody>
                    <div class="scroll">
                        <table class="table table-bordered table-striped text-center">
                            <thead>
                                <tr>
                                    <th class="text-center">Projekt</th>
                                    <th class="text-center">Tätigkeit</th>
                                </tr>
                            </thead>
                            @foreach (Project pro in proService.ShowAllProjects())
                            {
            <tr>
                <td class="pt-3-half"> @pro.Title</td>
                <td class="pt-3-half">
                    ohne spezielle Aktivität
                    @if (pro.ActivitiesWithEmployees[""].Any(x => x == myProfile.PersoNumber))
                    {
<button class="btn btn-primary" @onclick="@(e => RemoveMe(pro, "") )">
    <span class="oi oi-minus"></span>
</button>
                        <span class="text-success"> war dabei</span> }
                                            else
                                            {
                        <button class="btn btn-primary" @onclick="@(e => AddMe(pro, "") )">
                            <span class="oi oi-plus"></span>
                        </button>}
                    <br>
                    @foreach (var key in pro.ActivitiesWithEmployees.Keys.Where(x => x != ""))
                    {
@key
                        @if (pro.ActivitiesWithEmployees[key].Any(x => x == myProfile.PersoNumber))
                        {
<button class="btn btn-primary" @onclick="@(e => RemoveMe(pro, @key) )">
    <span class="oi oi-minus"></span>
</button>
                            <span class="text-success"> war dabei</span> }
                                                    else
                                                    {
                            <button class="btn btn-primary" @onclick="@(e => AddMe(pro, @key) )">
                                <span class="oi oi-plus"></span>
                            </button>}
                                                <br>}
                </td>
            </tr>}
                        </table>
                    </div>
                </CardBody>
            </CollapsibleCard>
        </div>
    </div>
</div>

<button type="submit" class="btn btn-secondary" @onclick="@Validate">Änderungen speichern.</button>
<br>
oder klick einfach Enter, sobad du was geändert hast
<br>
<br>
<br>

<Modal @ref="modal">
    <Title>Sie haben folgende Änderungen vogenommen</Title>

    <Body>
        <ul class="alert alert-danger" role="alert">
            @foreach (string line in changeInfo.ErrorMessages)
            {
<li>
    <pre>@line</pre>
</li>}
        </ul>
        <ul class="alert alert-info" role="alert">
            @foreach (string line in changeInfo.InfoMessages)
            {
<li>
    <pre>@line</pre>
</li>}
        </ul>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" @onclick="@UpdateProfile">Save changes</button>
        <button type="button" class="btn btn-secondary" @onclick="@Close">Schliesen</button>
    </Footer>
</Modal>



@code { private Modal modal { get; set; }
            private Employee myProfile = new Employee();
            private string skillSearch = "";
            private float[] expirence = new float[3];


            private ChangeResult changeInfo = new();


            protected override async Task OnInitializedAsync()
            {
                var authstate = await authentiProvider.GetAuthenticationStateAsync();

                myProfile = profileService.ShowProfile(authstate.User.Identity.Name) ?? new Employee();
                profileService.ChangeEventHandel += OnChangeReturnEvent;
                expirence = new float[] { 0, 0, myProfile.Expirience };
            }


            private bool eventFromAreaCameBefore = true;
            public void KeyHandler(KeyboardEventArgs e, bool isTextArea)
            {
                Close();
                if ((e.Code == "Enter" || e.Code == "NumpadEnter") && !(eventFromAreaCameBefore || isTextArea))
                    Validate();
                eventFromAreaCameBefore = isTextArea;
            }
            private void Validate()
            {
                myProfile.Expirience = expirence[0] + expirence[1] + expirence[2];

                profileService.ValidateUpdate(myProfile);
                if (changeInfo.InfoMessages.Any() || changeInfo.ErrorMessages.Any())
                    modal.Open();
            }
            private void Close()
            {
                modal.Close();
                changeInfo = new();
            }
            private async void UpdateProfile()
            {
                if (!changeInfo.ErrorMessages.Any())
                {
                    profileService.Update(myProfile);
                    modal.Close();
                    await JS.InvokeVoidAsync("scrollTop");
                }
            }
            private async Task JustUpload(InputFileChangeEventArgs eventArgs)
            {
                await profileService.Uploade(myProfile, eventArgs.File);
            }



            private void AddMe(Project p, string act)
            {
                proService.Add(p, myProfile, act);
            }
            private void RemoveMe(Project p, string act)
            {
                proService.Remove(p, myProfile, act);
            }




            private void OnChangeReturnEvent(object sender, ChangeResult e) => changeInfo = e; }
