

@inject ILanguageService langService
@inject ISkillService skillService


@typeparam TItem
<div>
    @foreach (var item in Data)
    {
        var containt = SelectedValues.Contains(item);
        var nameToShow = TextField.Invoke(item);

        if ((item is Skill skillCast) && skillCast.Type == SkillGroup.Hardskill)
        {
            var lvlInSelected = ((ISet<Skill>)SelectedValues).FirstOrDefault(x => x.Name == skillCast.Name)?.Level ?? "";
            var allLvl = skillService.GetAllLevel();
                    <div class="row" style="overflow-x: hidden;">
                        <div class="col-md-7">
                            <span ><input type="checkbox" checked=@containt @onchange="e => { CheckboxClicked( e.Value, item); }" /> @nameToShow</span>
                        </div>

                        <div class="col-md-3 ml-auto  @(containt ? "" : "d-none")" >
                            <div class="form-inline @(lvlInSelected == "" ? "bg-warning" : "")">
                                <select class="form-control form-control-sm" value="@lvlInSelected"  @onchange="@(async e => Refresh(item, e.Value) )">
                            @for (int i = 0; i < allLvl.Length; i++)
                            {
                                <option value="@allLvl[i]"> @allLvl[i]</option>
                            }
                                </select>
                            </div>
                        </div>
                    </div>
        }
        else if (item is Language langCast)
        {
            var lvlInSelected = ((ISet<Language>)SelectedValues).FirstOrDefault(x => x.Name == langCast.Name)?.Level ?? "";
            var allLvl = langService.GetAllLevel();
            if(lvlInSelected == "")lvlInSelected =  allLvl[0];  //default
                    <div class="row" style="overflow-x: hidden;">
                        <div class="col-md-5">
                            <input type="checkbox" checked=@containt @onchange="e => { CheckboxClicked( e.Value, item); }" />
                            <span> @nameToShow</span>
                        </div>

                        <div class="col-md-6 @(containt ? "" : "d-none")">
                            <div class="form-inline @(lvlInSelected == "" ? "bg-warning" : "")">
                                <select class="form-control form-control-sm" value="@lvlInSelected"  @onchange="@(async e => Refresh(item, e.Value) )">
                            @for (int i = 0; i < allLvl.Length; i++)
                            {
                                <option value="@allLvl[i]"> @allLvl[i]</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        }

        else
        {
            <div>
                <label>
                    <input type="checkbox" checked=@containt @onchange="e => { CheckboxClicked( e.Value, item); }" />
                    <span style="min-width: 70px; margin-left: 4px"> @nameToShow</span>
                </label> 
            </div>
                       
        }
    }

</div>



@code {
    //Data for the Checkbox
    [Parameter] public IEnumerable<TItem> Data { get; set; }
    // The field to be shown adjacent to checkbox
    [Parameter] public Func<TItem, string> TextField { get; set; } // is mostly just item.ToString but not allways

    // The array which contains the list of selected checkboxs
    [Parameter] public ISet<TItem> SelectedValues { get; set; }
    //public Dictionary<string, int> NameLevel { get; set; } = new();




    public void Refresh(TItem itemm, Object val)
    {
        SelectedValues.Remove(itemm);
        if (itemm is Language lanCast)
            lanCast.Level = val.ToString();
        if (itemm is Skill skillCast)
            skillCast.Level = val.ToString();
        SelectedValues.Add(itemm);
    }

    //Method to update the selected value on click on checkbox
    public void CheckboxClicked(object marked, TItem itemm)
    {
        if ((bool)marked)
            SelectedValues.Add(itemm);
        else
            SelectedValues.Remove(itemm);
    }
}


